{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","inputFilterValue","selectFilterValue","filterHandler","event","target","name","value","setState","compareText","title","toLowerCase","includes","filterBySelect","todos","filter","completed","getVisibleTodos","visibleTodos","this","props","selectedUserId","onUserSelect","className","type","placeholder","onChange","id","map","visibleTodo","cn","htmlFor","checked","readOnly","userId","onClick","React","Component","BASE_URL","getTodos","a","fetch","response","json","getUserById","user","CurrentUser","userLoadError","getCurrentUser","currentUser","prevProps","email","phone","onClear","App","selectUser","clearUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22144e85.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\n\ninterface Props {\n  selectedUserId: number,\n  todos: Todo[];\n  onUserSelect: (userId: number) => void,\n}\n\ninterface State {\n  inputFilterValue: string,\n  selectFilterValue: string,\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    inputFilterValue: '',\n    selectFilterValue: 'all',\n  };\n\n  filterHandler = (event: FilterEvent) => {\n    const { name, value } = event.target;\n\n    this.setState(state => ({\n      ...state,\n      [name]: value,\n    }));\n  };\n\n  compareText = (title: string, inputFilterValue: string) => {\n    return title.toLowerCase().includes(inputFilterValue.toLowerCase());\n  };\n\n  filterBySelect = (todos: Todo[], selectFilterValue: string) => {\n    switch (selectFilterValue) {\n      case 'completed':\n        return todos.filter(({ completed }) => completed);\n      case 'not-completed':\n        return todos.filter(({ completed }) => !completed);\n      default:\n        return todos;\n    }\n  };\n\n  getVisibleTodos = (todos: Todo[]) => {\n    const { inputFilterValue, selectFilterValue } = this.state;\n\n    const visibleTodos = todos\n      .filter(({ title }) => this.compareText(title, inputFilterValue));\n\n    return this.filterBySelect(visibleTodos, selectFilterValue);\n  };\n\n  render() {\n    const { selectedUserId, todos, onUserSelect } = this.props;\n    const { inputFilterValue, selectFilterValue } = this.state;\n\n    const visibleTodos = this.getVisibleTodos(todos);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <input\n            name=\"inputFilterValue\"\n            type=\"text\"\n            placeholder=\"Filter by task title\"\n            value={inputFilterValue}\n            onChange={this.filterHandler}\n          />\n\n          <select\n            name=\"selectFilterValue\"\n            id=\"select-filter\"\n            value={selectFilterValue}\n            onChange={this.filterHandler}\n          >\n            <option value=\"all\">\n              Select all\n            </option>\n            <option value=\"completed\">\n              Select completed\n            </option>\n            <option value=\"not-completed\">\n              Select not completed\n            </option>\n          </select>\n\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(visibleTodo => (\n              <li\n                key={visibleTodo.id}\n                className={cn(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': visibleTodo.completed,\n                    'TodoList__item--unchecked': !visibleTodo.completed,\n                  },\n                )}\n              >\n                <label htmlFor={`${visibleTodo.id}`}>\n                  <input\n                    id={`${visibleTodo.id}`}\n                    type=\"checkbox\"\n                    checked={visibleTodo.completed}\n                    readOnly\n                  />\n                  <p>{visibleTodo.title}</p>\n                </label>\n\n                <button\n                  className={cn(\n                    'button',\n                    'TodoList__user-button',\n                    { 'TodoList__user-button--selected': selectedUserId === visibleTodo.userId },\n                  )}\n                  type=\"button\"\n                  onClick={() => onUserSelect(visibleTodo.userId)}\n                >\n                  {`User #${visibleTodo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async () => {\n  const response = await fetch(`${BASE_URL}/todos`);\n  const todos: Todo[] = await response.json();\n\n  return todos;\n};\n\nexport const getUserById = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n  const user = await response.json();\n\n  return user;\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUserById } from '../../api/api';\n\ninterface Props {\n  userId: number,\n  onClear: () => void,\n}\n\ninterface State {\n  user: User | null,\n  userLoadError: boolean,\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    userLoadError: false,\n  };\n\n  async componentDidMount() {\n    await this.getCurrentUser();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (this.props.userId !== prevProps.userId) {\n      await this.getCurrentUser();\n    }\n  }\n\n  getCurrentUser = async () => {\n    try {\n      const currentUser = await getUserById(this.props.userId);\n\n      this.setState({\n        user: currentUser,\n        userLoadError: false,\n      });\n    } catch {\n      this.setState({\n        user: null,\n        userLoadError: true,\n      });\n    }\n  };\n\n  render() {\n    const { user, userLoadError } = this.state;\n\n    return (\n      (user && !userLoadError) ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={this.props.onClear}\n          >\n            Clear user\n          </button>\n        </div>\n      ) : (\n        `Couldn't load info about user #${this.props.userId}`\n      )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            onUserSelect={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClear={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}